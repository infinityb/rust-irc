use std::any::Any;
use std::collections::VecDeque;

use parse::IrcMsg;
use watchers::join::JoinResult;
use watchers::who::WhoResult;

/// An event, which is usually generated by reading a line from the server.
#[derive(Debug)]
pub enum IrcEvent {
    /// An IRC message from the server
    IrcMsg(IrcMsg),
    /// The bundled result of a JOIN command
    JoinBundle(JoinResult),
    /// The bundled result of a WHO command
    WhoBundle(WhoResult),
    /// Extension event
    Extension(Box<Any>),
}

pub struct IrcSender {
    outgoing: Vec<IrcMsg>,
}

impl IrcSender {
    fn new() -> IrcSender {
        IrcSender {
            outgoing: Vec::new(),
        }
    }
    
    pub fn write_msg(&mut self, msg: IrcMsg) {
        self.outgoing.push(msg);
    }
}

pub struct PluginManager {
    plugins: Vec<Box<Plugin+'static>>,
    outgoing: VecDeque<IrcMsg>,
}

impl PluginManager {
    pub fn on_irc_msg(&mut self, msg: IrcMsg) -> Vec<IrcEvent> {
        let mut outgoing_events: Vec<IrcEvent> = Vec::new();
        let mut sender = IrcSender::new();

        outgoing_events.push(IrcEvent::IrcMsg(msg.clone()));
        for plugin in self.plugins.iter_mut() {
            outgoing_events.extend(plugin.on_irc_msg(&mut sender, &msg).into_iter());
        }

        self.outgoing.extend(sender.outgoing.into_iter());
        outgoing_events
    }
}

pub trait Plugin {
    fn on_irc_msg(&mut self, sender: &mut IrcSender, msg: &IrcMsg) -> Vec<IrcEvent>;
}